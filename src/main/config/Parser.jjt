/**
 *  Protocol Buffers v.3 grammar  for JavaCC
 *  Contributed by Toshikazu Ando (foobar@em.boo.jp)
 */

options {
    /* Must not be STATIC, because the parser creates and runs extra parsers, one per "import" clause.
       Furthermore, each parser uses its own Thread.
    * For description of options see https://github.com/IntershopCommunicationsAG/javacc-gradle-plugin.
    * */
    STATIC=false;
    SANITY_CHECK=true;
    FORCE_LA_CHECK=true;
    DEBUG_LOOKAHEAD=false;
    DEBUG_PARSER=true;
    DEBUG_TOKEN_MANAGER=false;
    //JDK_VERSION="1.8";
}

PARSER_BEGIN(Parser)
package io.github.protopick.parse;

import java.util.AbstractMap; // We use AbstractMap.SimpleEntry for typed pairs (2-item tuples)
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import io.github.protopick.compile.Field;
import io.github.protopick.compile.TypeDefinition;
import io.github.protopick.compile.TypeName;
import io.github.protopick.compile.TypeNameOfField;
import io.github.protopick.compile.TypeNameDefinition;
import io.github.protopick.compile.TypeNamePackage;

/** Protobuf 3 grammar, with support for collecting limited type information. Purpose: Generate a custom schema and similar.
*/
public class Parser {
    /** Mutable - set once parsed, used when instantiating other TypeName instances. 'package' is at the top of .proto files,
    * hence this gets processed before BNF rules that need it. It's NOT per ParserContext, but per-parser (per .proto file).
    * <br/>
    * Because of this, don't use auto-generated methods ReInit(), or reset packageName to null first.
    * Then you'd have to call ParserContext.unregisterContext(), too.
    * */
    private TypeNamePackage packageName= new TypeNamePackage(Token.newToken(ParserConstants.PACKAGE_TKN), "");

    // @For removing the leading comment slashes "//" and any whitespace left of them:
    //private static final Pattern COMMENT_PREFIX= Pattern.compile( "^\\w*//" );

    /* To indicate extra information, add a special (single-line) comment (or several) immediately before
    that related token. TODO check: There must be no empty line between the comment(s) and mainToken.
    See handlingInstruction(Token) and how it's used.
     */
    //private static final Pattern HANDLING_INSTRUCTION= Pattern.compile("GENERATE *DB *SCHEMA");

    /** If the given mainToken has any special comment(s) immediately before it, then this extracts
     *  its value and registers it. */
    private void addHandlingInstruction(HandlingInstructed instructed, Token mainToken) {
        if (mainToken.specialToken!=null) {
            String content= "";
            Token special= mainToken.specialToken;
            while (special!=null) {
                if (!content.isEmpty())
                    content= " " +content;
                content= special.image.substring(2).trim()+ content;
                special= special.specialToken;
            }

            //Matcher match= HANDLING_INSTRUCTION.matcher(raw);
            //if (match.matches())
            HandlingInstruction instruction= new HandlingInstruction(content);
            if (instructed.getInstruction()!=null)
                instructed.getInstruction().append(instruction);
            else
                instructed.setInstruction(instruction);
        }
    }

    private ParserContext context;

    public void registerWithContext (ParserContext givenContext) {
        if (context!=null) {
            throw new IllegalStateException("Parser already has its context set.");
        }
        context= givenContext;
    }

    // Beware: JavaCC 7.0.4 doesn't support Java 7 "diamond operator": new ThreadLocal<>()
    private static final ThreadLocal<Boolean> alreadyParsing= new ThreadLocal<Boolean>();
    {
        if( alreadyParsing.get()!=null ) {
            throw new IllegalStateException("Use one Parser instance per Thread. Don't create Parser instance(s) on the 'main' Thread.");
        }
        alreadyParsing.set(true);
    }
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

SPECIAL_TOKEN :
{// @TODO allow multi-line comments /* ... */
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}


TOKEN :
{
  <CSTRING_TKN: "\"" ( ~["\""] )* "\"" >
| <EQUL_TKN: "=">
| <SEMI_COLON_TKN: ";">
| <COLON_TKN: ":">
| <COMMA_TKN: ",">
| <DOT_TKN: ".">
| <TO_TKN: "to">
| <LEFTBRACE_TKN: "{">
| <RIGHTBRACE_TKN: "}">
| <LEFTPAREN_TKN: "(">
| <RIGHTPAREN_TKN: ")">
| <LEFTBRACKET_TKN: "[">
| <RIGHTBRACKET_TKN: "]">
| <LESSTHAN_TKN: "<">
| <GRATETHAN_TKN: ">">
| <SYNTAX_TKN: "syntax">
| <BOOLEAN_TKN: "true" | "false">
| <REQUIRED_TKN: "required">
| <OPTIONAL_TKN: "optional">
| <OPTION_TKN: "option">
| <IMPORT_TKN: "import">
| <PUBLIC_TKN: "public">
| <PACKAGE_TKN: "package">
| <SERVICE_TKN: "service">
| <MESSAGE_TKN: "message">
| <ENUM_TKN: "enum">
| <ONEOF_TKN: "oneof">
| <GROUP_TKN: "group">
| <EXTENTIONS_TKN: "extensions">
| <EXTEND_TKN: "extend">
| <MAP_TKN: "map">
| <RESERVED_TKN: "reserved">
| <REPEATED_TKN: "repeated">
| <RETURNS_TKN: "returns">
| <STREAM_TKN: "stream">
| <TYPE_TKN: "double"
           | "float"
           | "int32"
           | "int64"
           | "uint32"
           | "uint64"
           | "sint32"
           | "sint64"
           | "fixed32"
           | "fixed64"
           | "sfixed32"
           | "sfixed64"
           | "bool"
           | "string"
           | "bytes"
           | "Any">
| <RPC_TKN: "rpc">
| <NUMBER_TKN: "0" | (["-"])?["1"-"9"](["0"-"9"])* | "max">
| <DOUBLE_TKN: ("0" | (["-"])?["1"-"9"](["0"-"9"])*) "." (["0"-"9"])*>
| <IDENT_TKN: ["_","a"-"z","A"-"Z"] (["_","a"-"z","A"-"Z","0"-"9"])*>
// The following has to be collected at Token level, not at Parser level. Why?
// Because word "service" is a valid part of a dotted identifier, for example:
// package com.my-company.service.user;
// Without the following, word "service" became SERVICE_TKN, which then upset the Parser!
| <DOTTED_IDENT_TKN: ["_","a"-"z","A"-"Z"] ( (["_","a"-"z","A"-"Z","0"-"9"]) (".")? )*>
}

void Input() : {
} {
  (ImportPart()
   | SyntaxPart()
   | OptionPart()
   | PackagePart()
   | ServicePart()
   | MessagePart(null)
   | EnumPart(null)
   | ExtendPart())*
}

void ImportPart() : {
  String filePath;
} {
  <IMPORT_TKN> [PublicPart()] filePath=CStringPart() <SEMI_COLON_TKN>
  { context.parse (filePath);
  }
}

void PublicPart() : {
} {
    <PUBLIC_TKN>
}

void ValuePart() : {
} {
  BooleanPart()
   | CStringPart()
   | NumberPart()
   | DoublePart()
   | IdentPart()
   | BraceValuePart()
}
void BooleanPart() : {
} {
    <BOOLEAN_TKN> /* { code...}*/
}
String CStringPart() : {
  Token t;
} {
    t=<CSTRING_TKN>
    {return t.image.substring(1, t.image.length()); /*The same string, but without the enclosing quotes. */ }
}
Token NumberPart() : {
  Token t;
} {
    t=<NUMBER_TKN>
    {return t;}
}
void DoublePart() : { 
} {
    <DOUBLE_TKN>
}
Token IdentPart() : {
  Token t;
} {
    t=<IDENT_TKN> {return t;}
}
Token DottedIdentPart() : {
  Token t;
} {
    t=<DOTTED_IDENT_TKN> {return t;}
}
void BraceValuePart() : {
} {
   <LEFTBRACE_TKN>
   (BraceValueOnePart())*
   <RIGHTBRACE_TKN>
}
void BraceValueOnePart() : {
} {
   IdentPart() <COLON_TKN> (BraceValueOneBracketPart() | ValuePart())
}
void BraceValueOneBracketPart() : {
} {
   <LEFTBRACKET_TKN>
   ValuePart() (<COMMA_TKN> ValuePart())*
   <RIGHTBRACKET_TKN>
}
void SyntaxPart() : {
} { 
   <SYNTAX_TKN> <EQUL_TKN> CStringPart() <SEMI_COLON_TKN>
}
void OptionPart() : {
} {     
    <OPTION_TKN> ClassPartNoCapture() <EQUL_TKN> ValuePart() <SEMI_COLON_TKN>
}

void ClassPartNoCapture() : {
} {
  ClassPart(null, null, null, null)
}

/** @param isNewType It's for an extra validation of the intent:
* true - if it's for defining new types ("message Abc", "enum Def"...). These may be inner types (like Java inner "static" classes).
  false - if it's for defining a field only: ([repeated] relative.type.path fieldName);
  null - indicating that the rule consumer doesn't need TypeName
* (and that it may have passed null-s as other parameters). This is complex enough, so better to be explicit.
* @param newTypeToken indicates what kind of 'type' (e.g. "message", "enum"...) this identifier is for - if it's for defining a new
* message/enum. Then the name defined here must not contain any dots (TypeName constructor validates that).
  If, instead, we're defining a field (which refers to a message/enum), then newTypeToken must be null. The name may contain dots.
  @param parentOrContext Either a parent type (if isNewType), or a type where this field belongs
  (if !isNewType).
  @param field Only used when !isNewType, then we put any handling instruction in the given field.
  */
TypeName ClassPart(Boolean isNewType, Token newTypeToken, TypeNameDefinition parentOrContext, Field field) : {
    Token ident; // the type/field name
    TypeNameDefinition typeNameDefinition= null; // Used only for new  types (not for fields).
    String fieldFullTypeName= ""; // Used only for types of defining fields (not for defining new types).
} {
  {if ( (isNewType==Boolean.FALSE) != (field!=null))
      throw new IllegalArgumentException("isNewType: " +isNewType+ "doesn't match the fact that field is "
            +(field==null ? "null." : "non-null."));
   if (isNewType!=null && isNewType != (newTypeToken!=null))
      throw new IllegalArgumentException("isNewType: " +isNewType+ "doesn't match the fact that newTypeToken is "
            +(newTypeToken==null ? "null." : "non-null."));
  }
  ( ( ident=DottedIdentPart()
    | ident=IdentPart()
    )
    {   String parts[]= ident.image.split("\\.");
        fieldFullTypeName= ident.image;
        if (isNewType==Boolean.TRUE) {
            typeNameDefinition= new TypeNameDefinition(newTypeToken, packageName, parentOrContext, parts[0]);
            for (int i=1; i<parts.length; i++) {
                // Composing a dot-separated name. On every iteration, the previously captured typeName becomes the new parent.
                typeNameDefinition= new TypeNameDefinition(newTypeToken, packageName, typeNameDefinition, parts[i]);
            }
        }
        if (isNewType==Boolean.FALSE)
            addHandlingInstruction( field, ident );
    }
  | CustomOptionsPart()
  )
  {   if (isNewType!=null) {
          if (isNewType) {
              if (!typeNameDefinition.fullName().endsWith(fieldFullTypeName))
                  throw new IllegalStateException( typeNameDefinition.fullName()+ " should end with " +fieldFullTypeName );
              return typeNameDefinition;
          }
          // The field reference type has context = parentOrContext. It doesn't have any dot-separated tokens added.
          return new TypeNameOfField(packageName, parentOrContext, fieldFullTypeName);
      }
      return null;
  }
}

/** A type-safe shortcut. It helps to keep the code cleaner. */
TypeNameDefinition ClassPartDefinition(Token newTypeToken, TypeNameDefinition parent) : {
    TypeName result;
} {
    result= ClassPart( true, newTypeToken, parent, null )
    { return (TypeNameDefinition)result; }
}

void CustomOptionsPart() : {
} {
   <LEFTPAREN_TKN> ClassPartNoCapture() <RIGHTPAREN_TKN> {throw new UnsupportedOperationException("CustomOptionsPart not supported");}
}
Token KeyPart() : {
 Token t;
} {
   (t= <IDENT_TKN>
    | t= <MESSAGE_TKN>
    | t= <PACKAGE_TKN>
    | t= <SERVICE_TKN>
   )
   {return t;}
}

void PackagePart() : {
 Token t;
 TypeName newPackageName;
} { 
  t=<PACKAGE_TKN> newPackageName=ClassPart(true, t, null, null) <SEMI_COLON_TKN>
  { if (!packageName.name.isEmpty()) {
      throw new IllegalStateException("packageName has been already set to: " +packageName.name);
    }
    // Convert back to string, and to package-specific instance. Easier than changing ClassPart(), which is already complex.
    packageName= new TypeNamePackage(t, newPackageName.fullName());
  }
}

void ServicePart() : {
} { 
  <SERVICE_TKN> <IDENT_TKN>
   <LEFTBRACE_TKN>
   (OptionPart()
    |RpcPart())*
   <RIGHTBRACE_TKN>
}
void RpcPart() : {
} { 
  <RPC_TKN> ClassPartNoCapture()
   <LEFTPAREN_TKN>
   [ (StreamPart())? ClassPartNoCapture() ]
   <RIGHTPAREN_TKN>
   <RETURNS_TKN>
   
   <LEFTPAREN_TKN>
   [ (StreamPart())? ClassPartNoCapture() ]
   <RIGHTPAREN_TKN>
   
   (RpcBracePart() | <SEMI_COLON_TKN>)
}
void StreamPart() : {
} {     
    <STREAM_TKN>
}
void RpcBracePart() : {
} {     
    <LEFTBRACE_TKN>
    (OptionPart())*
    <RIGHTBRACE_TKN>
}

void MessagePart(TypeNameDefinition parent) : {
    Token t;
    TypeNameDefinition typeName;
} {
  t=<MESSAGE_TKN>
  typeName=ClassPartDefinition(t, parent)
  { TypeDefinition type= context.addNewDefinition( typeName );
    System.out.println("MessagePart " +typeName.fullName());
  addHandlingInstruction (type, t);
}
  MessageBranchPart( type )
}
void MessageBranchPart(TypeDefinition typeDefinition) : {
} {
   <LEFTBRACE_TKN>
   (AttributeMemberPart(typeDefinition)
    |EnumPart(typeDefinition.typeNameDefinition)
    |ReservedPart()
    |OneOfPart(typeDefinition)
    |MapPart( new Field(typeDefinition) )
    |MessagePart(typeDefinition.typeNameDefinition)
    |ExtentionsPart()
    |ExtendPart()
    |OptionPart()
    |<SEMI_COLON_TKN>)*
   <RIGHTBRACE_TKN> {System.out.println("End of message body " +typeDefinition.typeNameDefinition.fullName() );}
}

void AttributeMemberPart(TypeDefinition typeDefinition) : {
  Field field= new Field(typeDefinition);
  Token attributeOrRepeated;
} { 
  [ attributeOrRepeated=AttributePart()
    {field.attribute= Field.attributeFrom(attributeOrRepeated);
     addHandlingInstruction(field, attributeOrRepeated);
    }
  ]
  [ attributeOrRepeated=RepeatedPart()
    {field.isRepeated= true;
     addHandlingInstruction(field, attributeOrRepeated);
    }
  ]
  ( MemberPart(field)
   |GroupPart() {throw new Error("GroupPart is not supported.");})
}

void MemberPart(/*boolean isOneOf,*/Field field) : {
 TypeNameOfField type;
 Token name, number;
} {
  field.typeNameOfField= ClassOrTypePart(field)
  name=KeyPart() <EQUL_TKN> number=NumberPart() [BracketPart()] <SEMI_COLON_TKN>
  {field.name= name.image;
   // no adding of handling instruction, as that was already done by ClassOrTypePart()
   System.out.println( "field " +field.name + " of type " +field.typeNameOfField.name );
  }
}

Token AttributePart() : {
  Token t;
} {
    t=<REQUIRED_TKN> {return t;}
    | t=<OPTIONAL_TKN> {return t;}
}
Token RepeatedPart() : {
  Token t;
} {
    t=<REPEATED_TKN> {return t;}
}
void GroupPart() : {
} {
  <GROUP_TKN> ClassPartNoCapture() <EQUL_TKN> NumberPart()
  MessageBranchPart(null)
}

TypeNameOfField ClassOrTypePart(Field field) : {
 Token t= null;
 TypeName cp;
} {     
    t=TypePart()
    { addHandlingInstruction(field, t);
      return new TypeNameOfField(t);
    }
    | cp=ClassPart(false, null, field.typeDefinition.typeNameDefinition, field)
    {
     return (TypeNameOfField)cp;
    }
}

Token TypePart() : {
  Token t;
} {
  t=<TYPE_TKN> {return t;}
}

void BracketPart() : {
} {
  <LEFTBRACKET_TKN>
  (BracketMemberPart() (<COMMA_TKN> BracketMemberPart())*)?
  <RIGHTBRACKET_TKN>
}
void BracketMemberPart() : {} {
  ClassPartNoCapture() <EQUL_TKN> ValuePart()
}

void EnumPart(TypeNameDefinition parent) : {
 Token t;
 TypeNameDefinition typeNameDefinition;
} {
   t= <ENUM_TKN>
   typeNameDefinition= ClassPartDefinition(t, parent)
   { TypeDefinition type= context.addNewDefinition( typeNameDefinition );
     addHandlingInstruction (type, t);
     type.isEnum= true;
   }
   <LEFTBRACE_TKN>
   ( {Field field= new Field(type);
     }
     EnumMemberPart(field)
   )*
   <RIGHTBRACE_TKN>
}
void EnumMemberPart(Field field) : {
  TypeNameOfField typeNameOfField;
  Token name;
} {
  [EnumOptionMemberPart() {throw new Error("Enum options are not supported.");}]
  /* Previously ClassOrTypePart, which made it complicated. */
  /* We don't need handling instructions for enum values. */
  name= IdentPart()
  {field.name= name.image;}
  <EQUL_TKN> ValuePart() [BracketPart()] <SEMI_COLON_TKN>
}
void EnumOptionMemberPart() : {
} { 
  <OPTION_TKN>
}

void ReservedPart() : {
} { 
  <RESERVED_TKN> ValuePart() (DeviderPart() ValuePart())* <SEMI_COLON_TKN>
}
void DeviderPart() : {
} {
    <COMMA_TKN>
    | <TO_TKN>
}

void OneOfPart(TypeDefinition typeDefinition) : {
  Field field= new Field(typeDefinition);
  // @TODO unsupported
} {
  <ONEOF_TKN>
   ClassPartNoCapture() //From the specification this name seems almost unused
   <LEFTBRACE_TKN>
   (MemberPart(/*true,*/field))*
   <RIGHTBRACE_TKN>
}

void MapPart(Field field) : {
  Token name;
  field.isMap= true;
} {

  <MAP_TKN>
  <LESSTHAN_TKN>
   field.typeNameOfField= ClassOrTypePart(field)
   <COMMA_TKN>
   field.typeNameOfMapValues= ClassOrTypePart(field)
  <GRATETHAN_TKN>
  name= KeyPart() <EQUL_TKN> NumberPart() <SEMI_COLON_TKN>
  {//@TODO handling instruction
   field.name= name.image;}
}

void ExtentionsPart() : {
} { 

  <EXTENTIONS_TKN> NumberPart() <TO_TKN> NumberPart() <SEMI_COLON_TKN>
}
void ExtendPart() : {
} { 
  <EXTEND_TKN> ClassPartNoCapture() MessageBranchPart(null)
}
/* END */
